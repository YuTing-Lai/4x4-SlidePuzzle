//============================================================================
// Name        : Slide_Puzzle_BruteCheck.cpp
// Author      : TimLai
// Version     :
// Copyright   : Your copyright notice
// Description : Check if it have solution
//============================================================================

#include <iostream>
#include <cstdlib>
#include <cstdio>
#include <time.h>
#include <iomanip>
using namespace std;

int question[16];
int puzzle[6][6] = {{0}};

bool table[17];

void print_puzzle(int arr[6][6]){
	for(int i=1; i<=4; i++){
		for(int j=1; j<=4; j++){
			if(arr[i][j] == 16)
				cout << setw(3) << " " << " ";
			else
			cout << setw(3) << arr[i][j] << " ";
		}
		cout << endl;
	}
}

bool near(int a){
	if(!table[a])
		return false;
	if(a>15 || a<1)
		return false;

	int posA=0;
	for(; posA<16; posA++){
		if(puzzle[posA/4 +1][posA%4 +1] == 16)
			break;
	}
	int rowA = posA/4 + 1;
	int colA = posA%4 + 1;

	//upside
	if(puzzle[rowA-1][colA] == a)
		return true;
	//left side
	else if(puzzle[rowA][colA-1] == a)
		return true;
	//right side
	else if(puzzle[rowA][colA+1] == a)
		return true;
	//down side
	else if(puzzle[rowA+1][colA] == a)
		return true;

	//not near
	return false;

}

void swap_puzzle(int a){
	int posA=0;
	for(; posA<16; posA++){
		if(puzzle[posA/4 +1][posA%4 +1] == 16)
			break;
	}
	int rowA = posA/4 + 1;
	int colA = posA%4 + 1;

	int posB=0;
	for(; posB<16; posB++){
		if(puzzle[posB/4 +1][posB%4 +1] == a)
			break;
	}
	int rowB = posB/4 + 1;
	int colB = posB%4 + 1;

	puzzle[rowA][colA] = a;
	puzzle[rowB][colB] = 16;
}

bool correct(){
	for(int i=0; i<16; i++){
		if(puzzle[i/4 +1][i%4 +1] != i+1)
			return false;
	}
	return true;
}

int main() {
	cc = 0;
	memset(table,true,17);
	cout << "Input the puzzle, from left to right, from up to down." << endl;
	cout << "If it is the space, input 16." << endl;

	int puzzle_number;
	for(int i=0; i<16; i++){
		cin >> puzzle_number;
		puzzle[i/4 +1][i%4 +1] = puzzle_number;
	}

	print_puzzle(puzzle);

	srand( time(NULL) );

	while(1){
		while(puzzle[1][1] != 1){
			int move = rand() % 15 +1;
			if(near(move)){
				swap_puzzle(move);
			}
		}
		table[1] = false;

		while(puzzle[1][2] != 2){
			int move = rand() % 14 +2;
			if(near(move)){
				swap_puzzle(move);
			}
		}
		table[2] = false;

		while(puzzle[2][1] != 5){
			int move = rand() % 13 +3;
			if(near(move)){
				swap_puzzle(move);
			}
		}
		table[5] = false;

		while(puzzle[2][2] != 6){
			int move =rand() % 13 +3;
			if(near(move)){
				swap_puzzle(move);
			}
		}
		table[6] = false;

		while( (puzzle[1][3] != 3) || (puzzle[1][4] != 4) ){
			int move = rand() %13 +3;
			if(near(move))
				swap_puzzle(move);
		}
		table[3] = table[4] = false;

		while( (puzzle[2][3] != 7) || (puzzle[2][4] != 8) ){
			int move = rand() %9 +7;
			if(near(move))
				swap_puzzle(move);
		}
		table[7] = table[8] = false;

		while( (puzzle[3][1] != 9) || (puzzle[4][1] != 13) ){
			int move = rand() %7 +9;
			if(near(move))
				swap_puzzle(move);
		}
		table[9] = table[13] = false;

		while( (puzzle[3][2] != 10) || (puzzle[4][2] != 14) ){
			int move = rand() %6 +10;
			if(near(move))
				swap_puzzle(move);
		}
		table[10] = table[14] = false;

		while(puzzle[3][3] != 11){
			int move = rand() %5 + 11;
			if(near(move))
				swap_puzzle(move);
		}
		table[11] = false;

		while(puzzle[4][4] != 16){
			int move = rand() %4 + 12;
			if(near(move))
				swap_puzzle(move);
		}



		break;
	}

	cout << endl;
	print_puzzle(puzzle);

	cout << endl;
	if(correct()){
		cout << "The puzzle has solution." << endl;
	}
	else{
		cout << "The puzzle has no solution." << endl;
	}







	return 0;
}
